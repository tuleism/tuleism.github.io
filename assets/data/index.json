{"hash":"2d0b9b7c82cc8455fdc7846c0dfc0dcc756590e1","data":{"metadata":{"siteName":"Random.nextBlog","siteUrl":"https://tuleism.github.io","siteDescription":"Tech Blog on Scala, Programming, Data, Search and Distributed Systems"},"allPost":{"edges":[{"node":{"slug":"parallel-backpressured-kafka-consumer","path":"/blog/2021/parallel-backpressured-kafka-consumer/","title":"Parallel, Back-pressured Kafka Consumer","tags":[{"title":"kafka"},{"title":"concurrency"},{"title":"parallelism"}],"timeToRead":11,"date":"14 Sep 2021","description":"A better model to understand and implement Kafka Consumers, which also supports back pressure and parallel processing.","excerpt":"Most Kafka Consumer tutorials use a synchronous poll-then-process loop that is not ideal. Worse yet, it gives developers the wrong impression about how Kafka works. We look at a better model to understand and implement Kafka Consumers, which also supports back pressure and parallel processing."}},{"node":{"slug":"elasticsearch-zero-downtime-reindex","path":"/blog/2021/elasticsearch-zero-downtime-reindex/","title":"Zero Downtime Reindex in Elasticsearch","tags":[{"title":"elasticsearch"},{"title":"architecture"},{"title":"distributed-systems"}],"timeToRead":5,"date":"22 Aug 2021","description":"A generic, eventually consistent, zero downtime solution to reindex data in ElasticSearch.","excerpt":"Reindexing data is a common operation in working with Elasticsearch. However, existing solutions are purely about data and thus limited in applicability. By taking application code into account, we come up with a generic, eventually consistent, zero downtime solution to reindex data in ElasticSearch."}},{"node":{"slug":"scala-smart-constructors","path":"/blog/2020/scala-smart-constructors/","title":"Smart Constructors in Scala","tags":[{"title":"scala"},{"title":"programming"},{"title":"tricks"}],"timeToRead":5,"date":"15 Aug 2020","description":"Analyzing various Smart Constructors implementations in Scala.","excerpt":"Sometimes, we need guarantees about the values in our program beyond what can be accomplished with the usual type system checks. Smart Constructors is one solution for this. We look at various ways to implement Smart Constructors in Scala and analyze their pros and cons."}}]}},"context":{}}